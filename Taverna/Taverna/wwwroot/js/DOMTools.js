var DOMTools;(()=>{"use strict";var t={4957:(t,e,n)=>{n.d(e,{lerp:()=>i,regexNumberPattern:()=>o,rotateCoordinates:()=>r});const o=/-?\d+\.?\d*/g;function r(t,e,n){const o=Math.PI/180*n;return{x:t*Math.cos(o)-e*Math.sin(o),y:t*Math.sin(o)+e*Math.cos(o)}}function i(t,e,n){return(1-n)*t+n*e}},8736:(t,e,n)=>{function o(t){const e=t.replace(/\D/g,"");let n;if(e.length<=10){const t=/^(\d{2})(\d{4})(\d{0,4})$/;n=e.replace(t,"($1) $2-$3")}else{const t=/^(\d{2})(\d{5})(\d{0,4})$/;n=e.replace(t,"($1) $2-$3")}return n}n.d(e,{toPhoneNumber:()=>o})}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};n.r(o),n.d(o,{addActionKey:()=>f,bindElementViewIfChecked:()=>nt,bindElementsByCheck:()=>_,checkElementCollision:()=>P,clickEventToCoordinates:()=>W,createInvisibleDivAboveParent:()=>H,debounceFactory:()=>it,delay:()=>A,dictKeysByActionKeydownOnce:()=>d,dictKeysByActionKeydownRepeat:()=>h,dictKeysByActionKeyup:()=>m,extractYouTubeId:()=>E,fetchWithTimeout:()=>g,getBodyRotationAxis:()=>U,getBodyRotationInDegrees:()=>Y,getCollisionDirection:()=>$,getDefaultAttributeForTarget:()=>L,getDistanceFromBorder:()=>N,getElementDimensions:()=>B,getElementDimensionsById:()=>T,getElementFromHTML:()=>C,getElementRotationAxis:()=>z,getElementRotationInDegrees:()=>V,getIndexInParent:()=>O,getRegexRemoveRotationBasedOnAxis:()=>j,getRegexRemoveRotationFromBody:()=>K,getRotatedBoundingBoxBasedOnBodyRotation:()=>R,getTransformCoordsFromElement:()=>G,getUserDeviceType:()=>tt,getValueFromRadioGroup:()=>ot,handleFetchWithTimeout:()=>y,handlePromise:()=>w,handlePromiseWithTimeout:()=>p,hideElement:()=>X,insertElementAtIndex:()=>F,isMobileBrowser:()=>Q,isOnScreen:()=>et,isValidYouTubeUrl:()=>v,isValidYoutubeUrlOrId:()=>b,mapDefaultAttributesByElement:()=>D,pollForVariable:()=>S,pollForVariableAsync:()=>M,regexGroupRotateValue:()=>s,regexGroupRotateXValue:()=>a,regexGroupRotateYValue:()=>u,regexGroupRotateZValue:()=>l,regexRemoveTranslateFromTransform:()=>c,replaceElement:()=>I,selectOptionByText:()=>ut,setAttributeListForElement:()=>x,setDefaultAttributeForTarget:()=>q,setInputForcePhoneNumberFormat:()=>J,sleepAsync:()=>Z,smoothScroll:()=>rt,smoothScrollTo:()=>st,smoothScrollToElement:()=>at,throttleFactory:()=>ct,waitUntilElementExists:()=>k});var r=n(4957),i=n(8736);const c=/translate\([^)]*\)/g,s=/rotate\((-?\d+\.?\d*)deg\)/,a=/rotateX\((-?\d+\.?\d*)deg\)/,u=/rotateY\((-?\d+\.?\d*)deg\)/,l=/rotateZ\((-?\d+\.?\d*)deg\)/,d=new Map,h=new Map,m=new Map;function f({key:t,keydown:e,keyup:n,executeOnlyOnce:o=!0}){o?function(t,e,n){d.has(t)?d.set(t,[e,...d.get(t)]):d.set(t,[e]),n&&(m.has(t)?m.set(t,[n,...m.get(t)]):m.set(t,[n]))}(t,e,n):function(t,e,n){h.has(t)?h.set(t,[e,...h.get(t)]):h.set(t,[e]),n&&(m.has(t)?m.set(t,[n,...m.get(t)]):m.set(t,[n]))}(t,e,n)}function g(t,e={},n=3e3){return Promise.race([fetch(t,e).then((t=>{if(!t.ok)throw new Error("Network response was not ok");return t.json()})),new Promise(((t,e)=>setTimeout((()=>e(new Error("Request timed out"))),n)))])}async function w(t){try{const e=await t;return{data:()=>e,error:null}}catch(t){return{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}async function p(t,e=3e3){try{const n=await Promise.race([t,new Promise(((t,n)=>setTimeout((()=>n(new Error("Request timed out"))),e)))]);return{data:()=>n,error:null}}catch(t){return{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}async function y(t,e=3e3){try{const n=await Promise.race([t(),new Promise(((t,n)=>setTimeout((()=>n(new Error("Request timed out"))),e)))]);if(!n.ok)throw new Error("Network response was not ok");const o=await n.json();return{data:()=>o,error:null}}catch(t){return{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}function b(t){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(t)||/^[a-zA-Z0-9_-]{11}$/.test(t)}function v(t){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(t)}function E(t){const e=t.match(/[?&]v=([^?&]+)/);return e&&e[1]?e[1]:11===t.length?t:null}function x(t,e){e.forEach((([e,n])=>{t.setAttribute(e,n)}))}function C(t,e=!0){if(!(t=e?t.trim():t))return null;const n=document.createElement("template");n.innerHTML=t;const o=n.content.children;return 1===o.length?o[0]:Array.from(o)}function T(t){const e=document.getElementById(t);if(!e)throw new Error("Invalid element at getElementDimensionsById with id: "+t);return B(e)}function B(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function R(t){const e=t.getBoundingClientRect(),n=e.left+e.width/2,o=e.top+e.height/2,r=Y(),i=Math.PI/180*r,c=Math.cos(i),s=Math.sin(i),a=n+(e.left-n)*c-(e.top-o)*s,u=o+(e.left-n)*s+(e.top-o)*c,l=n+(e.right-n)*c-(e.bottom-o)*s,d=o+(e.right-n)*s+(e.bottom-o)*c,h=Math.min(a,l),m=Math.min(u,d),f=Math.max(u,d),g=Math.max(a,l);return{x:h,y:m,width:e.width,height:e.height,toJSON:e.toJSON,left:h,top:m,bottom:f,right:g}}function P(t,e,n=!1){const o=n?R(t):t.getBoundingClientRect(),r=n?R(e):e.getBoundingClientRect();return!(o.top>r.bottom||o.right<r.left||o.bottom<r.top||o.left>r.right)}function S(t,e,n){const o=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(o),n(window[t]))}),100)}async function M(t,e,n){return new Promise((o=>{const r=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(r),n(window[t]),o())}),100)}))}function k(t){return new Promise((e=>{if(document.querySelector(t))return e(document.querySelector(t));const n=new MutationObserver((o=>{document.querySelector(t)&&(n.disconnect(),e(document.querySelector(t)))}));n.observe(document.body,{childList:!0,subtree:!0})}))}async function A(t){return new Promise((e=>setTimeout(e,t)))}function I(t,e,n){e&&t&&(e.removeChild(t),e.insertBefore(n,t.nextSibling))}function F(t,e,n){const o=t.childNodes;if(!(n>=0&&n<=o.length))throw console.error("Index out of bounds"),new Error("Index out of bounds");if(n===o.length)t.appendChild(e);else{const r=o[n];t.insertBefore(e,r)}}function O(t){const e=t.parentElement;return e?Array.from(e.children).indexOf(t):-1}const D=new Map;function L(t,e){D.has(t)||D.set(t,new Map);let n="";const o=D.get(t);return n=(o.has(e)?o.get(e):t.getAttribute(e))||"",q(t,e,n),n}function q(t,e,n){D.has(t)||D.set(t,new Map),D.get(t).set(e,n)}function $(t,e,n=!1){const o=n?R(t):t.getBoundingClientRect(),r=n?R(e):e.getBoundingClientRect();return{top:o.bottom>r.top&&o.top<r.top+r.height/3,right:o.left<r.right&&o.right>r.right-r.width/3,center:o.top<r.bottom&&o.bottom>r.top&&o.left<r.right&&o.right>r.left,bottom:o.top<r.bottom-r.height/3&&o.bottom>r.bottom-r.height/3,left:o.right>r.left&&o.left<r.left+r.width/3}}function N(t,e,n=!1){const o=n?R(t):t.getBoundingClientRect(),r=n?R(e):e.getBoundingClientRect(),i=o.left+o.width/2,c=o.top+o.height/2;return{top:c-r.top,right:r.right-i,bottom:r.bottom-c,left:i-r.left}}function V(t,e="x"){let n;switch(e){case"x":n=a;break;case"y":n=u;break;case"z":n=l;break;default:n=s}const o=n.exec(t.style.transform);return o?parseFloat(o[1]):0}function Y(){const t=K().exec(document.body.style.transform);return t?parseFloat(t[1]):0}function K(){return j(U())}function j(t){switch(t){case"x":return a;case"y":return u;case"z":return l;default:return s}}function U(){return z(document.body)}function z(t){const e=t.style.transform.toLowerCase();return e.includes("x")?"x":e.includes("y")?"y":"z"}function G(t,e=!1){const n=(window.getComputedStyle(t).transform.match(r.regexNumberPattern)??[0,0]).map((t=>+t));let o={x:void 0!==n[4]?Math.round(n[4]):0,y:void 0!==n[5]?Math.round(n[5]):0};if(e){const e=V(document.body,z(t))||0;return(0,r.rotateCoordinates)(o.x,o.y,e)}return o}function W(t){if(t instanceof MouseEvent)return{x:t.clientX,y:t.clientY};if(t instanceof TouchEvent){const e=t.changedTouches[0];return{x:e.clientX,y:e.clientY}}throw"Event not Found"}function H({parentElement:t,id:e,position:n,dimensions:o}){var r=document.createElement("div");return t.style.position||(t.style.position="relative"),r.id=e,r.style.position="absolute",r.style.width=o&&o.width?o.width.toString()+"px":"100%",r.style.height=o&&o.height?o.height.toString()+"px":"100%",r.style.top=(n?.top.toString()??"0")+"px",r.style.left=(n?.left.toString()??"0")+"px",r.style.opacity="0",r.style.pointerEvents="auto",t.appendChild(r),r}function X(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}async function Z(t){return await new Promise((e=>setTimeout((()=>e()),t)))}function _(t,e,n,o){t.checked&&n(e),(t.name?Array.from(document.querySelectorAll(`[name="${t.name}"]`)):[t]).forEach((r=>r.addEventListener("change",(r=>{t.checked?n(e,r):o(e,r)}))))}function J(t){t.addEventListener("input",(function(){let t=this.value;const e=t.replace(/\D/g,"");e.length>11&&(t=e.slice(0,11));let n=(0,i.toPhoneNumber)(t);10===n.length&&(n=n.replaceAll("-","")),this.value=n}))}function Q(){return/Android|iPhone/i.test(navigator.userAgent)}function tt(){var t=navigator.userAgent||navigator.vendor||window.opera;return/android/i.test(t)?"android":/iPad|iPhone|iPod/.test(t)&&!window.MSStream?"apple":"desktop"}function et(t){const e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}function nt(t,e,n={onCheck:(t,e)=>{},onUncheck:(t,e)=>{}}){_(t,e,(o=>{o.classList.add("show"),n.onCheck(t,e)}),(o=>{o.classList.remove("show"),n.onUncheck(t,e)}))}function ot(t){const e=document.querySelector(`[name=${t}]:checked`);if(e)return e.value}function rt(t,e){const n=window.scrollY||window.pageYOffset;let o=null;requestAnimationFrame((function i(c){o||(o=c);const s=c-o,a=Math.min(s/e,1),u=(0,r.lerp)(0,1,a);window.scrollTo(0,(0,r.lerp)(n,t,u)),s<e&&requestAnimationFrame(i)}))}function it(t,e){let n;return function(){const o=window,r=arguments;clearTimeout(n),n=window.setTimeout((()=>t.apply(o,r)),e)}}function ct(t,e){let n,o;return function(){const r=this,i=arguments,c=Date.now();!o||c-o>=e?(t.apply(r,i),o=c):(clearTimeout(n),n=setTimeout((()=>{t.apply(r,i),o=Date.now()}),e-(c-o)))}}function st(t){document.body.scrollTo({top:t,behavior:"smooth"})}function at(t,e=!0){e?document.body.scrollTo({top:t.getBoundingClientRect().y,left:t.getBoundingClientRect().x,behavior:"smooth"}):rt(t.getBoundingClientRect().top+window.scrollY,1e3)}function ut(t,e,n=!1){const o=document.getElementById(t);if(!o)return;const r=[...o.querySelectorAll("option")];let i;i=n?r.filter((t=>t.textContent&&t.textContent.toLowerCase().includes(e.toLowerCase())))[0].value:r.filter((t=>t.textContent&&t.textContent.toLowerCase()===e.toLowerCase()))[0].value,o.value=i}window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of d)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of h)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of m)t.code===e[0]&&e[1].forEach((e=>e(t)))})),DOMTools=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,